======================================================
Series of tests cases for integer_validator() in the base_geometry module
=========================================================
import the module
---------------------

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> bg = BaseGeometry()

>>> bg.integer_validator("string", 12)

>>> bg.integer_validator("string", 3 * 3)

>>> bg.integer_validator("string", True)
Traceback (most recent call last):
...
    raise TypeError("{} must be an integer".format(name))
TypeError: string must be an integer

>>> bg.integer_validator("string", -2)
Traceback (most recent call last):
...
    raise ValueError("{} must be greater than 0".format(name))
ValueError: string must be greater than 0

>>> bg.integer_validator("string", 0)
Traceback (most recent call last):
...
    raise ValueError("{} must be greater than 0".format(name))
ValueError: string must be greater than 0

>>> bg.integer_validator("string", "john")
Traceback (most recent call last):
...
    raise TypeError("{} must be an integer".format(name))
TypeError: string must be an integer

>>> bg.integer_validator("string", None)
Traceback (most recent call last):
...
    raise TypeError("{} must be an integer".format(name))
TypeError: string must be an integer

>>> bg.integer_validator("string", [3])
Traceback (most recent call last):
...
    raise TypeError("{} must be an integer".format(name))
TypeError: string must be an integer

>>> bg.integer_validator("string", (3,))
Traceback (most recent call last):
...
    raise TypeError("{} must be an integer".format(name))
TypeError: string must be an integer

>>> bg.integer_validator("string", {"three": 3})
Traceback (most recent call last):
...
    raise TypeError("{} must be an integer".format(name))
TypeError: string must be an integer

>>> bg.integer_validator("NaN", float("nan"))
Traceback (most recent call last):
...
    raise TypeError("{} must be an integer".format(name))
TypeError: NaN must be an integer

>>> bg.integer_validator("NaN")
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator("string", 12.6)
Traceback (most recent call last):
...
    raise TypeError("{} must be an integer".format(name))
TypeError: string must be an integer
>>> bg.integer_validator("string", 1200000000000000000000000000000000000000000000000000000000000000000000000)

